= Проект декомпозиции монолита на микросервисы для маркетплейса строительных материалов


Для разбиения монолитного приложения компании был выбран подход Domain-Driven Design (DDD). Основные причины выбора данного подхода:

== 1. Обоснование выбора подхода DDD:

=== Почему выбран DDD (Domain-Driven Design), а не «Разбиение по бизнес-возможностям»?

Основные причины выбора DDD:

1. **Сложность бизнес-доменов**:
   - Компания объединяет офлайн/онлайн-продажи, управление складами (своими и партнерскими), интеграцию с поставщиками и разными службами доставки. 
   - Эти домены имеют пересекающиеся процессы (например, резервирование товара при заказе влияет на склады и доставку).
   - DDD позволяет выделить *ограниченные контексты* (Bounded Contexts), чтобы минимизировать связанность между сервисами.
   - DDD позволяет более точно определить границы между доменами на основе их бизнес-логики и взаимодействий.

2. **Гибкость для изменений**:
   - Бизнес-правила часто меняются (например, политика доставки или интеграция с новым партнером).
   - DDD изолирует изменения в рамках домена, уменьшая влияние на другие сервисы.

=== «Разбиение по бизнес-возможностям» (Decompose By Business Capability) менее подходит, так как:
- Оно группирует функции по их назначению (например, «Управление заказами»), но не учитывает сложные взаимодействия между доменами.
- Риск создания сервисов с высокой связностью (например, общий сервис «Логистика» вместо разделения на «Доставка» и «Управление складами»).

== 2. Описание доменных областей бизнеса

На основе анализа текущей деятельности компании были выделены следующие ключевые доменные области:

[cols="1,3", options="header"]
|===
| Домен | Что в себя включает
| Товары | Ассортимент продукции, категоризация, характеристика товара,описание товара, цена, скидки
| Запасы | Отслеживание остатков на собственных складах/магазинов и складах поставщиков, резервирование товаров, пополнение запасов
| Заказы | Оформление заказа, отмена заказа, возврат заказа
| Доставка | Планирование маршрута доставки, расчет сроков доставки, расчёт стоимости доставки, выбор службы доставки (своей/партнерской), трекинг
| Уведомления | Уведомление клиентов о статусе заказа и маркетинговых акциях
| Клиенты | ЛК клиентов, информация о клиентах, история заказов, лояльность, персональные предложения, обработка обратной связи
| Сотрудники | ЛК сотрудников, информация о сотрудниках, отслеживание KPI работы и зон ответственности
| Платежи | Обработка платежей, интеграция с банками и платежными системами, возвраты средств, учёт платежей
| Аналитика| Формирование финансовых отчётов, прогнозирование спроса, мониторинг KPI
| Логи | Сбор и аналитика логов
|===

== 3. Выделенные микросервисы:

Каждая доменная область преобразована в набор микросервисов:

[cols="1,2,3", options="header"]
|===
| Сервис | Что делает | База данных
| **Product Catalog** 
| 1. Поиск и фильтрация товаров 
  
  2. Создание и редактирование атрибутов товаров

  3. Хранение описаний, изображений, технических характеристик, отзывов товаров
| *`MongoDB`*
| **Inventory Service** 
| 1. Синхронизация остатков с магазинами и складами поставщиков

2. Резервирование товаров при заказе

3. Триггеры на пополнение запасов

4. Поддержка складских операций: инвентаризция, учёт брака, перемещение товаров между складами
| *`PostgreSQL`*

| **Order Service** 
|1. Создание заказа с проверкой доступности товаров (через Inventory Service)

2. Обработка возвратов и отмен

3. Применение неперсональной скидки на товар

4. Расчет итоговой суммы

5. Поддержка актуального статуса заказа
| *`PostgreSQL`*

| **Delivery Service** 
| 1. Расчет стоимости доставки на основе веса, габаритов и локации

2. Выбор оптимальной службы доставки (своей или партнерской)

3. Интеграция с трекинг-системами

4. Управление курьерами компании
| *`PostgreSQL`*

*`MongoDB`*

*`Neo4j`*
| **Notification Service**
|1. Оповещение клиентов о статусах заказов

2. Отправка маркетинговых сообщений (скидки, акции)

3. Уведомления сотрудникам (новые заказы, KPI)
| *`Redis`*

| **Client Service** 
|
1. Аутентификация и авторизация.

2. Хранение информации о клиентах: истории заказов и предпочтений.

3. Персонализированные рекомендации (на основе Analytics Service).

4. Программа лояльности: начисление/списание бонусов, скидки
| *`PostgreSQL`*

*`Reddis`*

| **Employee Service**
|1. Аутентификация и авторизация.

2. Назначение ролей и прав доступа

3. Мониторинг деятельности сотрудников: система учёта рабочего времени, производительности труда, управление расписанием сотрудников

4.Расчёт KPI (для сотрудников)
| *`PostgreSQL`*

| **Payment Service** 
|1. Проведение платежей/возвратов средств

2. Интеграция с эквайрингом
| *`PostgreSQL`*

| **Analytics Service** 
| 1.Сбор данных из всех сервисов

2.Формирование финансовых и маркетинговых отчетов в реальном времени

3.Прогнозирование спроса с использованием ML: Анализ поведения пользователей (какие товары чаще просматривают, в каких регионах какие заказы)
| *`ClickHouse`*

| **Log Service**
|1.Сбор логов из всех сервисов 

2. Мониторинг ошибок и оповещения

3. Формирование отчётов дашбордов
| *`ELK`*
|===

=== Вспомогательные компоненты архитектуры:
**API Gateway** _(в качеству API Gateway может использоваться NGINX)_ : 

- Централизует входящие запросы от клиентов (веб, мобильные приложения, партнерские API);
- Обеспечивает маршрутизацию запросов к нужным микросервисам;
- Выполняет кэширование, аутентификацию, ограничение частоты запросов;
- Обеспечивает балансировку нагрузки;

**Docker**:

- Оборачивает каждый микросервис в изолированный контейнер.
- Обеспечивает удобное развертывание и миграцию сервисов.

**Kubernetes**:

- Управляет оркестрацией контейнеров.
- Обеспечивает авто-масштабирование (горизонтальное и вертикальное).
- Следит за здоровьем сервисов (если микросервис упал – Kubernetes его перезапустит)

**Apache Kafka**

- Позволяет асинхронно передавать события между микросервисами.
- Обеспечивает устойчивость к сбоям (если один сервис упал, сообщения сохраняются в Kafka).
